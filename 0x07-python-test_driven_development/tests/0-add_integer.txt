    >>> add_integer = __import__('0-add_integer').add_integer
    >>> add_integer(1, 2)
    3

    >>> add_integer(100, -2)
    98

    >>> add_integer(1.5, 2.3)
    3

    >>> add_integer(7.9, -2.5)
    5

    >>> add_integer(10)
    108

    >>> add_integer(0)
    98

    >>> add_integer(-3)
    95

    >>> add_integer(2.3, 4.7)
    6
    
    >>> add_integer(1, 'b')
    Traceback (most recent call last):
        ...
    TypeError: b must be an integer
    
    >>> add_integer('a', 2)
    Traceback (most recent call last):
        ...
    TypeError: a must be an integer

    >>> add_integer(0.0, None)
    Traceback (most recent call last):
	    ...
    TypeError: b must be an integer

    >>> add_integer(0, "pepe")
    Traceback (most recent call last):
	    ...
    TypeError: b must be an integer

    >>> add_integer("pepe", 1)
    Traceback (most recent call last):
	    ...
    TypeError: a must be an integer

    >>> add_integer("pepe", "mao")
    Traceback (most recent call last):
    	    ...
    TypeError: a must be an integer

    >>> add_integer(None)
    Traceback (most recent call last):
	      ...
    TypeError: a must be an integer

    >>> add_integer('3', 3)
    Traceback (most recent call last):
              ...
    TypeError: a must be an integer

    >>> add_integer((1, 1))
    Traceback (most recent call last):
              ...
    TypeError: a must be an integer

    >>> add_integer(123, [])
    Traceback (most recent call last):
	      ...
    TypeError: b must be an integer

    >>> add_integer("dog")
    Traceback (most recent call last):
	      ...
    TypeError: a must be an integer

    >>> add_integer(-1)
    97
    >>> add_integer(5, float("nan"))
    Traceback (most recent call last):
    ValueError: cannot convert float NaN to integer
    >>> add_integer(1, float('inf'))
    Traceback (most recent call last):
    ...
    OverflowError: cannot convert float infinity to integer


if __name__ == '__main__':
    import doctest
    doctest.testmod()
